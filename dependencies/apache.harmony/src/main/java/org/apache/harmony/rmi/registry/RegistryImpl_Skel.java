/*
 * RMI skeleton class
 * for class org.apache.harmony.rmi.registry.RegistryImpl
 * Compatible with stub protocol version 1.1/1.2
 *
 * Generated by DRL RMI Compiler (rmic).
 *
 * DO NOT EDIT!!!
 * Contents subject to change without notice!
 */
package org.apache.harmony.rmi.registry;

import org.apache.harmony.rmi.internal.nls.Messages;


public final class RegistryImpl_Skel implements java.rmi.server.Skeleton {

    private static final long interfaceHash = 4905912898345647071L;

    private static final java.rmi.server.Operation[] operations = {
        new java.rmi.server.Operation("void bind(java.lang.String, java.rmi.Remote)"), //$NON-NLS-1$
        new java.rmi.server.Operation("java.lang.String list()[]"), //$NON-NLS-1$
        new java.rmi.server.Operation("java.rmi.Remote lookup(java.lang.String)"), //$NON-NLS-1$
        new java.rmi.server.Operation("void rebind(java.lang.String, java.rmi.Remote)"), //$NON-NLS-1$
        new java.rmi.server.Operation("void unbind(java.lang.String)") //$NON-NLS-1$
    };

    public java.rmi.server.Operation[] getOperations() {
        return (java.rmi.server.Operation[]) operations.clone();
    }

    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash) throws java.lang.Exception {
        if (opnum < 0) {
            if (hash == 7583982177005850366L) {
                opnum = 0;
            } else if (hash == 2571371476350237748L) {
                opnum = 1;
            } else if (hash == -7538657168040752697L) {
                opnum = 2;
            } else if (hash == -8381844669958460146L) {
                opnum = 3;
            } else if (hash == 7305022919901907578L) {
                opnum = 4;
            } else {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.28", hash)); //$NON-NLS-1$
            }
        } else {
            if (hash != interfaceHash) {
                throw new java.rmi.server.SkeletonMismatchException(
                        Messages.getString("rmi.29", interfaceHash, hash)); //$NON-NLS-1$
            }
        }

        org.apache.harmony.rmi.registry.RegistryImpl server = (org.apache.harmony.rmi.registry.RegistryImpl) obj;

        switch (opnum) {

        case 0: {    // bind(String, Remote)

            java.lang.String $param_String_1;
            java.rmi.Remote $param_Remote_2;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_String_1 = (java.lang.String) in.readObject();
                $param_Remote_2 = (java.rmi.Remote) in.readObject();
            } catch (java.io.IOException e) {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.bind($param_String_1, $param_Remote_2);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new java.rmi.MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 1: {    // list()

            call.releaseInputStream();

            java.lang.String[] $result = server.list();

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new java.rmi.MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 2: {    // lookup(String)

            java.lang.String $param_String_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_String_1 = (java.lang.String) in.readObject();
            } catch (java.io.IOException e) {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            java.rmi.Remote $result = server.lookup($param_String_1);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                throw new java.rmi.MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 3: {    // rebind(String, Remote)

            java.lang.String $param_String_1;
            java.rmi.Remote $param_Remote_2;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_String_1 = (java.lang.String) in.readObject();
                $param_Remote_2 = (java.rmi.Remote) in.readObject();
            } catch (java.io.IOException e) {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.rebind($param_String_1, $param_Remote_2);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new java.rmi.MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 4: {    // unbind(String)

            java.lang.String $param_String_1;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_String_1 = (java.lang.String) in.readObject();
            } catch (java.io.IOException e) {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.unbind($param_String_1);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                throw new java.rmi.MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        default:
            throw new java.rmi.UnmarshalException(Messages.getString("rmi.2B", opnum)); //$NON-NLS-1$
        }
    }
}
