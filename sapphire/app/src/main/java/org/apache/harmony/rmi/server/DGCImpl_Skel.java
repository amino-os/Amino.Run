/*
 * RMI skeleton class
 * for class org.apache.harmony.rmi.server.DGCImpl
 * Compatible with stub protocol version 1.1
 *
 * Generated by DRL RMI Compiler (rmic).
 *
 * DO NOT EDIT!!!
 * Contents subject to change without notice!
 */
package org.apache.harmony.rmi.server;

import org.apache.harmony.rmi.internal.nls.Messages;


public final class DGCImpl_Skel implements java.rmi.server.Skeleton {

    private static final long interfaceHash = -669196253586618813L;

    private static final java.rmi.server.Operation[] operations = {
        new java.rmi.server.Operation("void clean(java.rmi.server.ObjID[], long, java.rmi.dgc.VMID, boolean)"), //$NON-NLS-1$
        new java.rmi.server.Operation("java.rmi.dgc.Lease dirty(java.rmi.server.ObjID[], long, java.rmi.dgc.Lease)") //$NON-NLS-1$
    };

    public java.rmi.server.Operation[] getOperations() {
        return (java.rmi.server.Operation[]) operations.clone();
    }

    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash) throws java.lang.Exception {
        if (hash != interfaceHash) {
            // rmi.2D=Interface hash mismatch, expected: {0}, received: {1}
            throw new java.rmi.server.SkeletonMismatchException(
                    Messages.getString("rmi.2D", interfaceHash, hash)); //$NON-NLS-1$
        }

        org.apache.harmony.rmi.server.DGCImpl server = (org.apache.harmony.rmi.server.DGCImpl) obj;

        switch (opnum) {

        case 0: {    // clean(ObjID[], long, VMID, boolean)

            java.rmi.server.ObjID[] $param_arrayOf_ObjID_1;
            long $param_long_2;
            java.rmi.dgc.VMID $param_VMID_3;
            boolean $param_boolean_4;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_arrayOf_ObjID_1 = (java.rmi.server.ObjID[]) in.readObject();
                $param_long_2 = in.readLong();
                $param_VMID_3 = (java.rmi.dgc.VMID) in.readObject();
                $param_boolean_4 = in.readBoolean();
            } catch (java.io.IOException e) {
                // rmi.2C=Error unmarshalling arguments
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                // rmi.2C=Error unmarshalling arguments
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            server.clean($param_arrayOf_ObjID_1, $param_long_2, $param_VMID_3, $param_boolean_4);

            try {
                call.getResultStream(true);
            } catch (java.io.IOException e) {
                // rmi.2A=Error marshalling return
                throw new java.rmi.MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        case 1: {    // dirty(ObjID[], long, Lease)

            java.rmi.server.ObjID[] $param_arrayOf_ObjID_1;
            long $param_long_2;
            java.rmi.dgc.Lease $param_Lease_3;

            try {
                java.io.ObjectInput in = call.getInputStream();
                $param_arrayOf_ObjID_1 = (java.rmi.server.ObjID[]) in.readObject();
                $param_long_2 = in.readLong();
                $param_Lease_3 = (java.rmi.dgc.Lease) in.readObject();
            } catch (java.io.IOException e) {
                // rmi.2C=Error unmarshalling arguments
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } catch (java.lang.ClassNotFoundException e) {
                // rmi.2C=Error unmarshalling arguments
                throw new java.rmi.UnmarshalException(Messages.getString("rmi.2C"), e); //$NON-NLS-1$
            } finally {
                call.releaseInputStream();
            }

            java.rmi.dgc.Lease $result = server.dirty($param_arrayOf_ObjID_1, $param_long_2, $param_Lease_3);

            try {
                java.io.ObjectOutput out = call.getResultStream(true);
                out.writeObject($result);
            } catch (java.io.IOException e) {
                // rmi.2A=Error marshalling return
                throw new java.rmi.MarshalException(Messages.getString("rmi.2A"), e); //$NON-NLS-1$
            }

            break;
        }

        default:
            // rmi.2B=Invalid method number: {0}
            throw new java.rmi.UnmarshalException(Messages.getString("rmi.2B", opnum)); //$NON-NLS-1$
        }
    }
}
