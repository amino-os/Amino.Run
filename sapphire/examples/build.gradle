// All default build scripts common to all examples go here.
// These defaults can be overridden in build.gradle files of individual examples where necessary.
subprojects {
    apply plugin: 'java-library'

    dependencies {
        compile project(':sapphire-core')
    }

    // Common rules for all JavaExec tasks, are added before execution.
    tasks.withType(JavaExec).whenTaskAdded {
        classpath += sourceSets.stubs.runtimeClasspath
        jvmArgs '-Djava.util.logging.config.file=' + project.projectDir + '/../../logging.properties'
    }
    
    // Run OMS
    task runoms(type: JavaExec) {
        main = 'amino.run.oms.OMSServerImpl'
        args project.property('omsIp'), project.property('omsPort')
    }

    // Run a kernel server
    task runks(type: JavaExec) {
        main = 'amino.run.kernel.server.KernelServerImpl'
        args project.property('kernelServerIp'), project.property('kernelServerPort'), project.property('omsIp'), project.property('omsPort'), project.property("kernelServerRegion")
    }

    // Run a second kernel server
    task runks2(type: JavaExec) {
        main = 'amino.run.kernel.server.KernelServerImpl'
        args project.property('kernelServerIp'), project.property('kernelServerPort2'), project.property('omsIp'), project.property('omsPort'), project.property("kernelServerRegion2")
    }

    // Run a third kernel server
    task runks3(type: JavaExec) {
        main = 'amino.run.kernel.server.KernelServerImpl'
        args project.property('kernelServerIp'), project.property('kernelServerPort3'), project.property('omsIp'), project.property('omsPort'), project.property("kernelServerRegion3")
    }

    // Run a fourth kernel server
    task runks4(type: JavaExec) {
        main = 'amino.run.kernel.server.KernelServerImpl'
        args project.property('kernelServerIp'), project.property('kernelServerPort4'), project.property('omsIp'), project.property('omsPort'), project.property("kernelServerRegion4")
    }

    // Run application
    task runapp(type: JavaExec) {
        args project.property('omsIp'), project.property('omsPort'), project.property('embeddedKernelServerIp'), project.property('kernelServerPort')
    }
}

// Added for running the Test environment consisting of OMS, 1 to 4 Kernel Servers and the test application together.
// The environment can be launched by running below command from amino rootDir: 
// "./gradlew :examples:hanksTodo:run" for executing the hanksTodo example.
// The default no of Kernel Servers launched is 2 and for different number of Kernel Servers, execute with command line
// parameter "KS". eg: For hanksTodo with 3 Kernel Servers: "./gradlew :examples:hanksTodo:run -PKS=3"
// The handling has been inspired based on the below description by Tomas Lins
// https://fbflex.wordpress.com/2013/03/14/gradle-madness-execwait-a-task-that-waits-for-commandline-calls-to-be-ready/
class ExecWait extends DefaultTask {
    String command

    @TaskAction
    def spawnProcess() {
        // Need to spawn the gradle task, only if the command is not empty.
        if (!command.isEmpty()) {
            def rootDir = project.rootDir
            def taskName = command.split(':').last()
            def readyExpr = "ready at port"
            def line

            Process process = new ProcessBuilder(command.split(' '))
                    .directory(rootDir)
                    .redirectErrorStream(true)
                    .start()
            InputStream stdout = process.getInputStream()
            BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

            while ((line = reader.readLine()) != null) {
                if (line.contains(readyExpr)) {
                    break;
                }
                // In the case of application, the stream contents are printed for user validation.
                if (taskName.equals("runapp")) {
                    println line
                }
            }
        }
    }
}
subprojects {
    def project = "$it.path"
    // Retrieve the value of command line parameter "KS" which specifies the no of
    // Kernel Servers needed. Default no of Kernel Servers is 2.
    def kernelServers = this.hasProperty("KS") ? this.property("KS").asType(byte) : 2
    if ((kernelServers < 1) || (kernelServers > 4)) {
        kernelServers = 2
    }

    task runenvoms(type: ExecWait) {
        command './gradlew ' + project + ':runoms'

        doLast {
            println "Launched OMS Server. !!!"
        }
    }
    task runenvks(type: ExecWait, dependsOn: runenvoms) {
        command './gradlew ' + project + ':runks'

        doLast {
            println "Launched Kernel Server 1. !!!"
        }
    }
    task runenvks2(type: ExecWait, dependsOn: runenvks) {
        if (kernelServers >= 2) {
            command './gradlew ' + project + ':runks2'

            doLast {
                println "Launched Kernel Server 2. !!!"
            }
        } else {
            command ''
        }
    }
    task runenvks3(type: ExecWait, dependsOn: runenvks2) {
        if (kernelServers >= 3) {
            command './gradlew ' + project + ':runks3'

            doLast {
                println "Launched Kernel Server 3. !!!"
            }
        } else {
            command ''
        }
    }
    task runenvks4(type: ExecWait, dependsOn: runenvks3) {
        if (kernelServers == 4) {
            command './gradlew ' + project + ':runks4'

            doLast {
                println "Launched Kernel Server 4. !!!"
            }
        } else {
            command ''
        }
    }
    task runenvapp(type: ExecWait, dependsOn: runenvks4) {
        command './gradlew ' + project + ':runapp'
    }

    task run (dependsOn: runenvapp) {
        // Need to cleanup all the background processes which were launched, before exiting.
        doLast {
            def ports = ["$omsPort", "$kernelServerPort", "$kernelServerPort2", "$kernelServerPort3", "$kernelServerPort4"]
            ports.each { port ->
                def cmd = "lsof -Fp -i :$port"
                def process = cmd.execute()
                process.in.eachLine { line ->
                    def killProcess = "kill -9 ${line.substring(1)}".execute()
                    killProcess.waitFor()
                }
            }
        }
    }
}

// Added for running all the amino examples together sequentially, with one gradle task.
// The environment can be launched by running below command from amino rootDir:
// "./gradlew :examples:run"
task run {
    subprojects.each { subproject ->
            dependsOn subproject.path + ':run'
    }
}

// For the parent examples project itself, we disable inherited tasks that don't make sense at this level.
genStubs {
    onlyIf() { false } // Disable
}
