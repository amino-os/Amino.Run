#!/usr/bin/python

# This script is for generating application stub files for the cloud env (linux host). It requires the app jar file generated by JDK tool chain. 
# It is different from another file generate_app_stubs.py, which generates application stub files for the device env, which in turn requires dex file generated by Android SDK/Android Studio tool chain.

import os
import sys
import getopt
import subprocess

def usage() :
    print "Usage: generate_app_stubs_on_hosts.py"
    print "         --sapphire-home <sapphire home dir>"
    print "         --app-name <app name>"
    print "         [-v | --verbose]"
    print "         [-h | --help]"

def parse_args() :
    try:
        sapphire_home = ""
        app_name = ""
        verbose = False
        opts, args = getopt.getopt(sys.argv[1:], 's:a:vh', ['sapphire-home=', 'app-name=', 'verbose', 'help'])
        for opt, arg in opts:
            if opt in ('-h', '--help'):
	        usage()
	        sys.exit(1)
            elif opt in ('-s', '--sapphire-home'):
	        sapphire_home = os.path.expanduser(arg)
	    elif opt in ('-a', '--app-name'):
	        app_name = arg
            elif opt in ('-v', '--verbose'):
                print "got -v"
                verbose = True

        return sapphire_home, app_name, verbose
    except getopt.GetoptError:
        usage()
        sys.exit(1)

def get_info(sapphire_home, app_name) :
    info = {}
    app_home = os.path.normpath(os.path.join(os.path.realpath(__file__), '../..'))
    info["app_home"] = app_home
    info["package"] = "sapphire.appexamples.%s.app"%(app_name.lower())
    info["inFolder"] = "%s/build/intermediates/classes/release/sapphire/appexamples/%s/app"%(app_home, app_name.lower())
    info["outFolder"] = "%s/src/main/java/sapphire/appexamples/%s/app/stubs"%(app_home, app_name.lower())
    info["cp_app"] = "%s/build/intermediates/packaged/release/classes.jar"%(app_home)
    info["cp_sapphire"] = sapphire_home + '/sapphire/sapphire-core/build/libs/sapphire-core.jar'
    info["cp_harmony"] = sapphire_home + '/sapphire/dependencies/apache.harmony/build/libs/apache.harmony.jar'
    return info

def main():
    sapphire_home, app_name, verbose = parse_args()
    if not sapphire_home:
        print "sapphire_home is not specified"
        usage()
        sys.exit(1)

    if not app_name:
        print "app_name is not specified"
        usage()
        sys.exit(1)

    info = get_info(sapphire_home, app_name)
    if (verbose):
        for key, value in info.items():
            print key, "=>", value
        print "-"*50

    if not os.path.exists(info["cp_app"]):
        print "Application classpath %s not exists"%info["cp_app"]
        sys.exit(1)

    if not os.path.exists(info["cp_sapphire"]):
        print "Sapphire classpath %s not exists"%info["cp_sapphire"]
        sys.exit(1)

    if not os.path.exists(info["cp_harmony"]):
        print "Harmony classpath %s not exists"%info["cp_harmony"]
        sys.exit(1)

    try:
        classpath = info["cp_app"] + ':' + info["cp_sapphire"] + ':' + info["cp_harmony"]
        cmd = ['java', '-cp',  classpath, 'sapphire.compiler.StubGenerator', info["inFolder"], info["package"], info["outFolder"]]

        p = subprocess.Popen(cmd)
        p.wait()
        print("Done!")
    except Exception as e:
        print e
    
if __name__ == '__main__':
    main()

