apply plugin: 'java-library'

// Task for app stub generation
genStubs {
    main = "amino.run.compiler.GraalStubGenerator"
    classpath = files("$projectDir/../../sapphire-core/build/classes/java/main/")
    def sapphireObjectPath = "$projectDir/src/main/js/amino/run/appdemo/KeyValueStore.js"
    def outPath = "$projectDir/src/main/java"
    def packageName = "amino.run.appdemo.stubs"
    def sapphireClasses = "KeyValueStore"
    args sapphireObjectPath, outPath, packageName, sapphireClasses
    outputs.dir "$projectDir/src/main/java/amino/run/appdemo/stubs" // Declare outputs, so gradle will run if they have been changed
    inputs.dir sapphireObjectPath   // Declare inputs, so gradle will run if they have been changed
}

// task for run javascript kvstore client
task runjsapp(type: Exec) {
    environment  OMS_IP: "${project.property('omsIp')}"
    environment  OMS_PORT: "${project.property('omsPort')}"
    environment  HOST_IP: "${project.property('embeddedKernelServerIp')}"
    environment  HOST_PORT: "${project.property('kernelServerPort')}"
    def classpath = sourceSets.main.runtimeClasspath.asPath

    //executable "/home/paas/graalvm-ce-1.0.0-rc6/bin/js"
    executable "$System.env.JAVA_HOME/bin/js"
    args "--jvm", "--polyglot", "--jvm.classpath=${classpath}",
            "${project.projectDir}/src/main/js/amino/run/appdemo/KeyValueStoreClient.js"
}

// Customise task to run Java app
runapp {
    environment  OMS_IP: "${project.property('omsIp')}"
    environment  OMS_PORT: "${project.property('omsPort')}"
    environment  HOST_IP: "${project.property('embeddedKernelServerIp')}"
    environment  HOST_PORT: "${project.property('kernelServerPort')}"
    environment  YAML_FILE:  "KeyValueStore.yaml"
    main = 'amino.run.appdemo.KeyValueStoreClient'
}

compileJava.dependsOn genStubs
runapp.dependsOn compileJava
