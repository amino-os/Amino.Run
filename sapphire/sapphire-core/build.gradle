plugins {
    // Google Java Format Plugin:
    // 1. Run `gradlew goJF` to format source codes
    // 2. Run `gradlew verGJF` to verify code farmat
    // 3. More usage information can be found at 
    // https://github.com/sherter/google-java-format-gradle-plugin
    id 'com.github.sherter.google-java-format' version '0.7.1'
    id 'java-library'
}

googleJavaFormat {
    options style: 'AOSP'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile project(':dependencies:java.rmi')
    compile 'org.json:json:20171018'
    // WARNING:
    // PR https://github.com/Huawei-PaaS/DCAP-Sapphire/pull/220 added some Graal
    // classes into sapphire-core. Now our sapphire-core can only be compiled by
    // GraalVM JDK. Please follow the instructions in the quick start guide at
    // https://github.com/Huawei-PaaS/DCAP-Sapphire/blob/master/docs/GettingStarted.md#quick-start
    // to set up GraalVM properly.

    compile 'org.graalvm:graal-sdk:1.0.0-rc5'
    compile 'org.yaml:snakeyaml:1.23'
    testCompile 'org.mockito:mockito-core:1.+'
    testCompile 'org.powermock:powermock:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    // TODO: quinton: the following 2 lines shouldn't be necessary
    // But if removed, 4 integration tests fail with the following types of exception.
    // Try to figure out why, and fix the problem so that these lines can be removed.
    //    amino.run.policy.ConsensusDMIntegrationTest > testConsensusDM FAILED
    //        amino.run.common.SapphireObjectCreationException at ConsensusDMIntegrationTest.java:42
    //            Caused by: java.lang.NullPointerException
    testCompile project(':examples:helloworld')
    integrationTestCompile project(':examples:helloworld')
}

// Maven Plugin Properties
// Reset maven properties to ensure that their values are 
// consistent with the values used by Maven Publish Plugin
group = project.property('mavenGroupId')
version =  project.property('mavenVersion')

/*
   Return a string containing the GraalVM version, e.g. "1.0.0-rc5" returned by 'java -version'
   NOTE: This is a very clunky way of executing 'java -version | grep GraalVM | awk {print $2}'
         I could not find an easier way to do it in gradle - see below
         Note that java outputs version info to stderr, not stdout
*/
def getGraalVmVersion = { ->
    def javaErrOut = new PipedOutputStream()
    def grepIn = new PipedInputStream(javaErrOut)
    def grepOut = new PipedOutputStream()
    def awkIn = new PipedInputStream(grepOut)
    def awkOut = new ByteArrayOutputStream()
    exec {
        commandLine 'java', '-version'
        errorOutput = javaErrOut
    }
    exec {
        commandLine 'grep', 'GraalVM'
        standardInput = grepIn
        standardOutput = grepOut
    }
    exec {
        commandLine 'awk', '{print $2}'
        standardInput = awkIn
        standardOutput = awkOut
    }
    return awkOut.toString().trim()
}

// Check that the installed GraalVM version matches the the standard version we use for this project.
task checkGraalVmVersion {
    inputs.property('graalVmVersion', null)
    inputs.property('actualVersion', { getGraalVmVersion() })
    doLast {
        def requiredVersion = project.property('graalVmVersion')
        def actualVersion =  getGraalVmVersion()
        if (!requiredVersion.equals(actualVersion)) {
            throw new GradleException("Incorrect GraalVM version '" + actualVersion + "' installed. Version '" + requiredVersion + "' required.")
        }
    }
}

task integTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// Customize DM stub generation
genStubs {
    def pkg = 'amino.run.policy'
    def src = file(project.buildDir.toString() + '/classes/java/main/amino/run/policy/')
    def dst = file(project.projectDir.toString() + '/src/main/java/amino/run/policy/stubs/')
    args src.toString(), pkg, dst.toString()
    outputs.dir dst // Declare outputs, so gradle will run if they have been changed
    inputs.dir src   // Declare inputs, so gradle will run if they have been changed
}

task genUnitTestStubs(type :JavaExec){
    main = "amino.run.compiler.StubGenerator"
    classpath = sourceSets.main.runtimeClasspath
    classpath += files("$projectDir/build/classes/java/test/")
    def pkg = 'amino.run.sampleSO'
    def src = file(project.buildDir.toString() + '/classes/java/test/amino/run/sampleSO/')
    def dst = file(project.projectDir.toString() + '/src/test/java/amino/run/sampleSO/stubs/')
    args src.toString(), pkg, dst.toString()
    outputs.dir dst
    inputs.dir src
}

task compileSampleSO(type: JavaCompile) {
    source = file(project.projectDir.toString() + '/src/test/java/amino/run/sampleSO')
    classpath = files(sourceSets.main.output.classesDir)
    destinationDir = file(project.buildDir.toString() + '/classes/java/test/')
    options.incremental = true
}

// Task for Graal SO Stub Generation:
// Run `gradlew genGraalStub` to generate stub files
task genGraalStub(type: JavaExec) {
    main = "amino.run.compiler.GraalStubGenerator"
    classpath += files(sourceSets.main.output.classesDir)
    def sapphireObjectPath = "$projectDir/src/test/resources/student.js"
    def outPath = "$projectDir/src/test/java"
    def packageName = "amino.run.stubs"
    def sapphireClasses = "Student"
    args sapphireObjectPath, outPath, packageName, sapphireClasses
    outputs.dir outPath // Declare outputs, so gradle will run if they have been changed
    inputs.dir sapphireObjectPath   // Declare inputs, so gradle will run if they have been changed
}

// Task for Graal stub compilation
task compileGraalStub(type: JavaCompile) {
    source = "$projectDir/src/test/java/amino/run/stubs"
    classpath = files(sourceSets.main.output.classesDir)
    // TODO: Quinton: Remove: classpath = files(sourceSets.main.output.classesDir)
    destinationDir = sourceSets.main.output.classesDir
    options.incremental = true
    inputs.dir genGraalStub.outputs
}
task genIntegTestStubs(type :JavaExec) {
    main = "amino.run.compiler.StubGenerator"
    classpath = sourceSets.main.runtimeClasspath
    classpath += files("$projectDir/build/classes/java/integrationTest/")
    def pkg = 'amino.run.demo'
    def src = file(project.buildDir.toString() + '/classes/java/integrationTest/amino/run/demo')
    def dst = file(project.projectDir.toString() + '/src/integrationTest/java/amino/run/demo/stubs')
    args src.toString(), pkg, dst.toString()
    outputs.dir dst // Declare outputs, so gradle will run if they have been changed
    inputs.dir src // Declare inputs, so gradle will run if they have been change
}

task compileIntegTestDemoPkg(type: JavaCompile) {
    source = file(project.projectDir.toString() + '/src/integrationTest/java/amino/run/demo/')
    classpath = sourceSets.integrationTest.compileClasspath
    destinationDir = file(project.buildDir.toString() + '/classes/java/integrationTest/')
    options.incremental = true
}

tasks.matching {(it.name != 'compileJava') && (it.name != 'checkGraalVmVersion')}.all {
    task -> task.dependsOn compileJava
}
tasks.googleJavaFormat.mustRunAfter compileJava
tasks.googleJavaFormat.mustRunAfter genStubs
tasks.googleJavaFormat.mustRunAfter genGraalStub
tasks.googleJavaFormat.mustRunAfter genUnitTestStubs
tasks.googleJavaFormat.mustRunAfter genIntegTestStubs

compileGraalStub.dependsOn genGraalStub
compileTestJava.dependsOn compileGraalStub
genUnitTestStubs.dependsOn compileSampleSO
compileTestJava.dependsOn genUnitTestStubs
genIntegTestStubs.dependsOn compileIntegTestDemoPkg
compileIntegrationTestJava.dependsOn genIntegTestStubs

check.dependsOn tasks.googleJavaFormat
check.dependsOn integTest
compileJava.dependsOn checkGraalVmVersion
integTest.mustRunAfter test
jar.inputs.dir compileStubs.outputs // jar needs to be rebuilt if stubs got recompiled
