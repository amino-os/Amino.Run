plugins {
    // Google Java Format Plugin:
    // 1. Run `gradlew goJF` to format source codes
    // 2. Run `gradlew verGJF` to verify code farmat
    // 3. More usage information can be found at 
    // https://github.com/sherter/google-java-format-gradle-plugin
    id 'com.github.sherter.google-java-format' version '0.7.1'
    id 'java-library'
}

googleJavaFormat {
    options style: 'AOSP'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile project(':dependencies:java.rmi')
    compile 'org.json:json:20171018'
    // WARNING:
    // PR https://github.com/Huawei-PaaS/DCAP-Sapphire/pull/220 added some Graal
    // classes into sapphire-core. Now our sapphire-core can only be compiled by
    // GraalVM JDK. Please follow the instructions in the quick start guide at
    // https://github.com/Huawei-PaaS/DCAP-Sapphire/blob/master/docs/GettingStarted.md#quick-start
    // to set up GraalVM properly.

    compile 'org.graalvm:graal-sdk:1.0.0-rc7'
    compile 'org.yaml:snakeyaml:1.23'
    testCompile 'org.mockito:mockito-core:1.+'
    testCompile 'org.powermock:powermock:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    testCompile project(':examples:helloworld')
    integrationTestCompile project(':examples:helloworld')
}


// Maven Plugin Properties
// Reset maven properties to ensure that their values are 
// consistent with the values used by Maven Publish Plugin
group = project.property('mavenGroupId')
version =  project.property('mavenVersion')

// Task for Policy Stub Generation:
// Run `gradlew genStubs` to generate policy stub files
task genStubs(type: JavaExec) {
    main = "sapphire.compiler.StubGenerator"
    classpath = sourceSets.main.runtimeClasspath
    def pkgName = 'sapphire.policy'
    def src = "$buildDir/classes/java/main/sapphire/policy/"
    def dst = "$projectDir/src/main/java/sapphire/policy/stubs/"
    args src, pkgName, dst
    outputs.dir dst // Declare outputs, so gradle will run if they have been changed
    inputs.dir src   // Declare inputs, so gradle will run if they have been changed
}

clean {
    delete genStubs.outputs // Add generated stubs to what the clean task must delete
}

// Task for stub compilation
task compileStubs(type: JavaCompile) {
    inputs.dir genStubs.outputs // Try to convince gradle to only recompile stubs when they've been regenerated.
    outputs.dir "$buildDir/classes/java/main/sapphire/policy/stubs" // ... or when someone messed with the compiled stubs
    source = sourceSets.main.java.srcDirs
    classpath = sourceSets.main.compileClasspath
    destinationDir = sourceSets.main.output.classesDir
    options.incremental = true
}

task integTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.googleJavaFormat.mustRunAfter genStubs
check.dependsOn tasks.googleJavaFormat
check.dependsOn integTest
integTest.mustRunAfter test
jar.inputs.dir compileStubs.outputs // jar needs to be rebuilt if stubs got recompiled
